#include "../../s21_decimal.h"

#suite s21_add

#test n_0
s21_decimal num1 = {{0x00000000, 0x00000000, 0x00000000, 0x80020000}};  // 0.00
s21_decimal num2 = {{0x00000000, 0x00000000, 0x00000000, 0x80020000}}; //0.00
s21_decimal tmp;
int ret = s21_add(num1, num2, &tmp);
s21_decimal result = {{0x00000000, 0x00000000, 0x00000000, 0x80020000}}; //0.00
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);


#test n_01
  s21_decimal test_value_1 = {{0, 0, 0, 0}};
    s21_decimal test_value_2 = {{0, 0, 0, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    int result_int;
    s21_from_int_to_decimal(1899999, &test_value_1);
    s21_from_int_to_decimal(100001, &test_value_2);
    s21_add(test_value_1, test_value_2, &result_dec);
    s21_from_decimal_to_int(result_dec, &result_int);
    ck_assert_int_eq(result_int, 2000000);

#test n_02
    s21_decimal test_value_1 = {{0, 0, 0, 0}};
    s21_decimal test_value_2 = {{0, 0, 0, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    int result_int;
    s21_from_int_to_decimal(199421, &test_value_1);
    s21_from_int_to_decimal(-4433, &test_value_2);
    s21_add(test_value_1, test_value_2, &result_dec);
    s21_from_decimal_to_int(result_dec, &result_int);
    ck_assert_int_eq(result_int, 199421 + (-4433));

#test n_03
    s21_decimal test_value_1 = {{0, 0, 0, 0}};
    s21_decimal test_value_2 = {{0, 0, 0, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    int result_int;
    s21_from_int_to_decimal(-199421, &test_value_1);
    s21_from_int_to_decimal(4433, &test_value_2);
    s21_add(test_value_1, test_value_2, &result_dec);
    s21_from_decimal_to_int(result_dec, &result_int);
    ck_assert_int_eq(result_int, -199421 + 4433);


#test n_04
    s21_decimal test_value_1 = {{0, 0, 0, 0}};
    s21_decimal test_value_2 = {{0, 0, 0, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    int result_int;
    s21_from_int_to_decimal(-199421, &test_value_1);
    s21_from_int_to_decimal(-4433, &test_value_2);
    s21_add(test_value_1, test_value_2, &result_dec);
    s21_from_decimal_to_int(result_dec, &result_int);
    ck_assert_int_eq(result_int, -199421 + (-4433));

#test n_05
    s21_decimal test_value_1 = {{10000, 3, 10, 0}};
    s21_decimal test_value_2 = {{5000, 2, 500, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_uint_eq(result_dec.bits[0], 10000 + 5000);
    ck_assert_uint_eq(result_dec.bits[1], 3 + 2);
    ck_assert_uint_eq(result_dec.bits[2], 10 + 500);

#test n_06
    s21_decimal test_value_1 = {{4294967295, 10, 10, 0}};
    s21_decimal test_value_2 = {{1, 2, 20, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_uint_eq(result_dec.bits[0], 0);
    ck_assert_uint_eq(result_dec.bits[1], 13);
    ck_assert_uint_eq(result_dec.bits[2], 30);

#test n_07
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967295, 0}};
    s21_decimal test_value_2 = {{1, 1, 1, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    int result = s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result, 1);

#test n_09
    s21_decimal test_value_1 = {{123, 0, 0, 262144}};
    s21_decimal test_value_2 = {{37, 0, 0, 196608}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_uint_eq(result_dec.bits[0], 493);
    ck_assert_uint_eq(result_dec.bits[3], 262144);

#test n_10
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967295, 65536}};
    s21_decimal test_value_2 = {{1, 0, 0, 0}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result_dec.bits[0], -1717986918);
    ck_assert_int_eq(result_dec.bits[1], -1717986919);
    ck_assert_int_eq(result_dec.bits[2], 429496729);
    ck_assert_int_eq(result_dec.bits[3], 0);

#test n_11
    s21_decimal src1, src2, result;
    int a = -1234;
    float b = 1.234;
    float res_origin = -1232.766;
    float res_our;
    s21_from_int_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_12
    s21_decimal src1, src2, result;
    int a = -1234;
    float b = -1.234;
    float res_origin = -1235.234;
    float res_our;
    s21_from_int_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_13
    s21_decimal src1, src2, result;
    float a = -1234;
    float b = -221.234;
    float res_origin = -1455.234;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_14
    s21_decimal src1, src2, result;
    float a = -9403;
    float b = 0.00234;
    float res_origin = -9402.99766;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_15
    s21_decimal src1, src2, result;
    float a = -940.3;
    float b = 0.000234;
    float res_origin = -940.299766;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_16
    s21_decimal src1, src2, result;
    float a = -0.9403;
    float b = 0.000234;
    float res_origin = -0.940066;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_17
    s21_decimal src1, src2, result;
    float a = -0.9403;
    float b = 2.0234;
    float res_origin = 1.0831;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_18
    s21_decimal src1, src2, result;
    float a = -0.9403;
    float b = -112.0234;
    float res_origin = -112.9637;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_19
    s21_decimal src1, src2, result;
    float a = -0.94e03;
    float b = -112.0234;
    float res_origin = -1052.0234;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_20
    s21_decimal src1, src2, result;
    float a = -0.94e03;
    float b = -112.0e2;
    float res_origin = -12140;
    float res_our;
    s21_from_float_to_decimal(a, &src1);
    s21_from_float_to_decimal(b, &src2);
    s21_add(src1, src2, &result);
    s21_from_decimal_to_float(result, &res_our);
    ck_assert_float_eq(res_our, res_origin);

#test n_21
    s21_decimal src1, src2, result;
    int scale = 0x1c0000;
    src1.bits[3] = scale;
    src1.bits[2] = 0;
    src1.bits[1] = 0xF;
    src1.bits[0] = 0x67E4FEEF;
    src2.bits[3] = scale;
    src2.bits[2] = 0;
    src2.bits[1] = 0xFF;
    src2.bits[0] = 0x67E4FFFF;
    s21_decimal result_origin;
    result_origin.bits[3] = scale;
    result_origin.bits[2] = 0;
    result_origin.bits[1] = 0x10E;
    result_origin.bits[0] = 0xCFC9FEEE;
    s21_add(src1, src2, &result);
    ck_assert_int_eq(result_origin.bits[3], result.bits[3]);
    ck_assert_int_eq(result_origin.bits[2], result.bits[2]);
    ck_assert_int_eq(result_origin.bits[1], result.bits[1]);
    ck_assert_int_eq(result_origin.bits[0], result.bits[0]);

#test n_22
    s21_decimal src1, src2, result;
    src1.bits[3] = 0x30000;
    src1.bits[2] = 0;
    src1.bits[1] = 0xFF;
    src1.bits[0] = 0x67E4F;
    src2.bits[3] = 0x60000;
    src2.bits[2] = 0;
    src2.bits[1] = 0xEA;
    src2.bits[0] = 0x67E4F;
    s21_decimal result_origin;
    result_origin.bits[3] = 0x60000;
    result_origin.bits[2] = 0;
    result_origin.bits[1] = 0x3E502;
    result_origin.bits[0] = 0x1963E2E7;
    s21_add(src1, src2, &result);
    ck_assert_int_eq(result_origin.bits[3], result.bits[3]);
    ck_assert_int_eq(result_origin.bits[2], result.bits[2]);
    ck_assert_int_eq(result_origin.bits[1], result.bits[1]);
    ck_assert_int_eq(result_origin.bits[0], result.bits[0]);

#test n_23
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967290, 0}};
    s21_decimal test_value_2 = {{100, 0, 0, 131072}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result_dec.bits[0], 0);
    ck_assert_int_eq(result_dec.bits[1], 0);
    ck_assert_int_eq(result_dec.bits[2], -5);
    ck_assert_int_eq(result_dec.bits[3], 0);

#test n_24
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967290, 0}};
    s21_decimal test_value_2 = {{5, 1, 0, 131072}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result_dec.bits[0], 42949672);
    ck_assert_int_eq(result_dec.bits[1], 0);
    ck_assert_int_eq(result_dec.bits[2], -5);
    ck_assert_int_eq(result_dec.bits[3], 0);

#test n_25
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967290, 0}};
    s21_decimal test_value_2 = {{5, 0, 1, 131072}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result_dec.bits[0], -171798693);
    ck_assert_int_eq(result_dec.bits[1], 42949672);
    ck_assert_int_eq(result_dec.bits[2], -5);
    ck_assert_int_eq(result_dec.bits[3], 0);

#test n_26
    s21_decimal test_value_1 = {{4294967295, 4294967295, 4294967290, 0}};
    s21_decimal test_value_2 = {{165, 0, 1, 131072}};
    s21_decimal result_dec = {{0, 0, 0, 0}};
    s21_add(test_value_1, test_value_2, &result_dec);
    ck_assert_int_eq(result_dec.bits[0], -171798691);
    ck_assert_int_eq(result_dec.bits[1], 42949672);
    ck_assert_int_eq(result_dec.bits[2], -5);
    ck_assert_int_eq(result_dec.bits[3], 0);

#test n_27
s21_decimal num1 =  {{0x00000019, 0x00000000, 0x00000000, 0x00010000}};  // 2.5
s21_decimal num2 = {{0x00000064, 0x00000000, 0x00000000, 0x00000000}};  // 100
s21_decimal tmp;
int ret = s21_add(num1, num2, &tmp);
s21_decimal result = {{0x00000401, 0x00000000, 0x00000000, 0x00010000}};  // 102.5
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_28
s21_decimal num1 =  {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}};  // 79228162514264337593543950334
s21_decimal num2 = {{0x00000031, 0x00000000, 0x00000000, 0x00020000}};  // 0.49
s21_decimal tmp;
int ret = s21_add(num1, num2, &tmp);
s21_decimal result = {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}};  // 79228162514264337593543950334
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_29
s21_decimal num1 =  {{0x00000183, 0x00000000, 0x00000000, 0x00020000}};  // 3.87
s21_decimal num2 = {{0x00004DA6, 0x00000000, 0x00000000, 0x00020000}}; // 198.78
s21_decimal tmp;
int ret = s21_add(num1, num2, &tmp);
s21_decimal result =  {{0x00004F29, 0x00000000, 0x00000000, 0x00020000}}; // 202.65
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);