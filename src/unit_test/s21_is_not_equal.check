#include "../../s21_decimal.h"

#suite is_not_equal

#test n_01
s21_decimal test_value_1 = {{0, 0, 0, 0}};
s21_decimal test_value_2 = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_not_equal(test_value_1, test_value_2), 0);  // 0 == 0 = True

#test n_02
s21_decimal test_value_1 = {{5000, 0, 0, 0}};
s21_decimal test_value_2 = {{5001, 0, 0, 0}};
ck_assert_int_eq(s21_is_not_equal(test_value_1, test_value_2), 1);  // 5000 == 5001 = False

#test n_03
s21_decimal test_value_1 = {{5000, 0, 0, 0}};
s21_decimal test_value_2 = {{5000, 0, 0, 2147483648}};
ck_assert_int_eq(s21_is_not_equal(test_value_1, test_value_2), 1);  // 5000 == -5000 = False

#test n_04
s21_decimal test_value_1 = {{5000, 0, 0, 0}};
s21_decimal test_value_2 = {{5000, 0, 0, 131072}};
ck_assert_int_eq(s21_is_not_equal(test_value_1, test_value_2), 1);  // 5000 == 50 = False

#test n_05
s21_decimal test_value_1 = {{5000, 1, 0, 0}};
s21_decimal test_value_2 = {{5000, 0, 2, 0}};
ck_assert_int_eq(s21_is_not_equal(test_value_1, test_value_2), 1);  // number1 == number2 = False

#test n_06
s21_decimal src1, src2;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test n_07
s21_decimal src1, src2;
// src1 = -9878798789;
// src2 = -3;
src1.bits[0] = 0b01001100110100101000000111000101;
src1.bits[1] = 0b00000000000000000000000000000010;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);


#test n_08
s21_decimal src1, src2;
// src1 = -545454512454545.35265454545645;
// src2 = 54564654;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b00000011010000001001011100101110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);


#test n_09
s21_decimal src1, src2;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);



#test n_10
s21_decimal src1, src2;
// src1 = 12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test n_11
s21_decimal src1, src2;
// src1 = 12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test n_12
s21_decimal src1, src2;
// src1 = 0;
// src2 = -37986322154988653.784354545765;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001111101101000110000001100101;
src2.bits[1] = 0b01000010001101101011011001100001;
src2.bits[2] = 0b01111010101111011000110010011010;
src2.bits[3] = 0b10000000000011000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test n_13
s21_decimal src1, src2;
// src1 = -784515454.7989898652154545652;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b10110001001110110100010111110100;
src1.bits[1] = 0b00111000100000111010110010000001;
src1.bits[2] = 0b00011001010110010101110000011000;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test n_14
s21_decimal src1, src2;
// src1 = -784515454.7989898652154545652;
// src2 = -784515454.7989898652154545652;
src1.bits[0] = 0b10110001001110110100010111110100;
src1.bits[1] = 0b00111000100000111010110010000001;
src1.bits[2] = 0b00011001010110010101110000011000;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b10110001001110110100010111110100;
src2.bits[1] = 0b00111000100000111010110010000001;
src2.bits[2] = 0b00011001010110010101110000011000;
src2.bits[3] = 0b10000000000100110000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 0;
ck_assert_int_eq(result, origin);

#test n_15
s21_decimal src1, src2;
// src1 = -79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);
