#include "../../s21_decimal.h"

#suite s21_from_float_to_decimal

#test n_01
float a = 1234567890123456789012345678.0;
float b = 0.0;
int error = 0;
int func_error = 0;
s21_decimal dec = {0};
func_error = s21_from_float_to_decimal(a, &dec);
s21_from_decimal_to_float(dec, &b);
ck_assert_int_eq(error, func_error);
ck_assert_float_eq(a, b);

#test n_02
    float src = 0.f;
s21_decimal tmp;
s21_decimal dst = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};  // 0
int ret = s21_from_float_to_decimal(src, &tmp);
ck_assert_int_eq(tmp.bits[0], dst.bits[0]);
ck_assert_int_eq(tmp.bits[1], dst.bits[1]);
ck_assert_int_eq(tmp.bits[2], dst.bits[2]);
ck_assert_int_eq(tmp.bits[3], dst.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_03
float a = 123456789012345678901234567.8;
float b = 0.0;
int error = 0;
int func_error = 0;
s21_decimal dec = {0};
func_error = s21_from_float_to_decimal(a, &dec);
s21_from_decimal_to_float(dec, &b);
ck_assert_int_eq(error, func_error);
ck_assert_float_eq(a, b);

#test n_04 
float a = 1234567890123456789012345.678;
float b = 0.0;
int error = 0;
int func_error = 0;
s21_decimal dec = {0};
func_error = s21_from_float_to_decimal(a, &dec);
s21_from_decimal_to_float(dec, &b);
ck_assert_int_eq(error, func_error);
ck_assert_float_eq(a, b);

#test n_05
float src = -0.923458755f;
s21_decimal tmp;
s21_decimal dst = {{0x008CE89C, 0x00000000, 0x00000000, 0x80070000}};  // -0.9234588
int ret = s21_from_float_to_decimal(src, &tmp);
ck_assert_int_eq(tmp.bits[0], dst.bits[0]);
ck_assert_int_eq(tmp.bits[1], dst.bits[1]);
ck_assert_int_eq(tmp.bits[2], dst.bits[2]);
ck_assert_int_eq(tmp.bits[3], dst.bits[3]);
ck_assert_int_eq(ret, 0); 


#test n_06
float src =  -0.00167000003f;
s21_decimal tmp;
s21_decimal dst = {{0x000000A7, 0x00000000, 0x00000000, 0x80050000}};  // -0.00167
int ret = s21_from_float_to_decimal(src, &tmp);
ck_assert_int_eq(tmp.bits[0], dst.bits[0]);
ck_assert_int_eq(tmp.bits[1], dst.bits[1]);
ck_assert_int_eq(tmp.bits[2], dst.bits[2]);
ck_assert_int_eq(tmp.bits[3], dst.bits[3]);
ck_assert_int_eq(ret, 0);



#test n_07
float src = 0.00000000000000000000000000016929383838292f;
s21_decimal tmp;
s21_decimal dst =  {{0x00000002, 0x00000000, 0x00000000, 0x001C0000}};
int ret = s21_from_float_to_decimal(src, &tmp);
ck_assert_int_eq(tmp.bits[0], dst.bits[0]);
ck_assert_int_eq(tmp.bits[1], dst.bits[1]);
ck_assert_int_eq(tmp.bits[2], dst.bits[2]);
ck_assert_int_eq(tmp.bits[3], dst.bits[3]);
ck_assert_int_eq(ret, 0);


#test n_09
s21_decimal dec = {0};
s21_from_float_to_decimal(-333.2222, &dec);
float tmp = 0;
s21_from_decimal_to_float(dec, &tmp);
ck_assert_float_eq_tol(tmp, -333.2222, 1e-06);

#test n_10
float f = 1.0 / 0.0;
s21_decimal result = {0};
s21_decimal check = {{0, 0, 0, 0}};
int return_value = s21_from_float_to_decimal(f, &result);
ck_assert_int_eq(s21_is_equal(result, check), 1);
ck_assert_int_eq(return_value, 1);

#test n_11
s21_decimal dec = {0};
float a = -1.0 / 0.0;
s21_from_float_to_decimal(a, &dec);
ck_assert_int_eq(dec.bits[0], 0);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);

#test n_12
  s21_decimal val;
  s21_from_float_to_decimal(22.14836E+03F, &val);
  ck_assert_int_eq(val.bits[0], 2214836);
  ck_assert_int_eq(val.bits[1], 0);
  ck_assert_int_eq(val.bits[2], 0);
  ck_assert_int_eq(val.bits[3], 131072);


#test n_13
  float f = 1.0 / 0.0;
  s21_decimal result = {0};
  s21_decimal check = {{0, 0, 0, 0}};
  int return_value = s21_from_float_to_decimal(f, &result);
  ck_assert_int_eq(s21_is_equal(result, check), 1);
  ck_assert_int_eq(return_value, 1);

#test n_14
  s21_decimal dec = {0};
  s21_from_float_to_decimal(-2.14748e+09, &dec);
  float tmp = 0;
  s21_from_decimal_to_float(dec, &tmp);
  ck_assert_float_eq_tol(tmp, -2.14748e+09, 1e-06);


#test n_15
  s21_decimal dec = {0};
  float a = -1.0 / 0.0;
  s21_from_float_to_decimal(a, &dec);
  ck_assert_int_eq(dec.bits[0], 0);
  ck_assert_int_eq(dec.bits[1], 0);
  ck_assert_int_eq(dec.bits[2], 0);
  ck_assert_int_eq(dec.bits[3], 0);


#test n_16
  s21_decimal dec = {0};
  s21_from_float_to_decimal(-333.2222, &dec);
  float tmp = 0;
  s21_from_decimal_to_float(dec, &tmp);
  ck_assert_float_eq_tol(tmp, -333.2222, 1e-06);