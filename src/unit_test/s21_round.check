#include "../../s21_decimal.h"

#suite s21_round

#test n_01
s21_decimal value =   {{0x00000000, 0x00000000, 0x00000000, 0x00000000}}; // 0
s21_decimal result =  {{0x00000000, 0x00000000, 0x00000000, 0x00000000}}; // 0
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);


#test n_02
s21_decimal value =  {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x801C0000}};  // -7.9228162514264337593543950335
s21_decimal result =   {{0x00000008, 0x00000000, 0x00000000, 0x80000000}};  //-8
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_03
s21_decimal value = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};  // 0
s21_decimal result = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};  // 0
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_04
s21_decimal value =  {{0x00000001, 0x00000000, 0x00000000, 0x00000000}};  // 1
s21_decimal result =  {{0x00000001, 0x00000000, 0x00000000, 0x00000000}};  // 1
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_05
s21_decimal value = {{0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x80050000}};  // -184467440737095.51615
s21_decimal result = {{0xAC471B48, 0x0000A7C5, 0x00000000, 0x80000000}}; //-184467440737096
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_06
s21_decimal value =  {{0x075BCD15, 0x00000000, 0x00000000, 0x801B0000}};  // -0.000000000000000000123456789
s21_decimal result =  {{0x00000000, 0x00000000, 0x00000000, 0x80000000}};  // 0
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_07
s21_decimal value =    {{0xFFFFFFFF, 0x00000000, 0x00000000, 0x80060000}};  // -4294.967295
s21_decimal result =  {{0x000010C7, 0x00000000, 0x00000000, 0x80000000}};  //-4295
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_08
s21_decimal value =  {{0x1FC40A5D, 0xA98FD4BE, 0x00000000, 0x80020000}}; // -122182182271212611.49
s21_decimal result =  {{0x24285C43, 0x01B2140C, 0x00000000, 0x80000000}};  //-122182182271212611
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_09
s21_decimal value =  {{0x00000011, 0x00000000, 0x00000000, 0x00020000}};  // 0.17
s21_decimal result =   {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};  // 0
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

#test n_10
s21_decimal value = {{0x52453C00, 0x0000013A, 0x00000000, 0x000B0000}};  // 13.50000000000
s21_decimal result = {{0x0000000E, 0x00000000, 0x00000000, 0x00000000}};  // 14
s21_decimal tmp;
int ret = s21_round(value, &tmp);
ck_assert_int_eq(result.bits[0], tmp.bits[0]);
ck_assert_int_eq(result.bits[1], tmp.bits[1]);
ck_assert_int_eq(result.bits[2], tmp.bits[2]);
ck_assert_int_eq(result.bits[3], tmp.bits[3]);
ck_assert_int_eq(ret, 0);

